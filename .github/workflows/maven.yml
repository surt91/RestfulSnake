# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build and Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache Node dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Build
      run: ./mvnw -Djavacpp.platform=linux-x86_64 -DskipNodeCompile -DskipTests clean verify

    - name: Clean up target directory
      run: rm -rf target/node
    - run: rm -rf target/*.jar*

    - uses: actions/upload-artifact@master
      with:
        name: multijsnake
        path: target/
        retention-days: 1

  python:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@master
      with:
        name: multijsnake
        path: target/

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      uses: py-actions/py-dependency-install@v4

    - name: Run one training iteration
      run: cd src/main/py ; python train_AC.py --test ; python train_convAC.py --test

  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@master
      with:
        name: multijsnake
        path: target/

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: install node
      uses: actions/setup-node@v3
    - run: npm install

    - name: Instrument js for coverage
      run: npm run debug

    - name: Unit and Integration Tests
      run: mvn -DskipNodeCompile -Djavacpp.platform=linux-x86_64 -Ddependency-check.skip=true verify

    - name: collect reports and badges
      run: mkdir -p out/badges

    - name: Generate Frontend-Coverage Badge
      run: python3 coverage2badge.py
    - run: mv frontend_coverage.svg out/badges/frontend_coverage.svg

    - name: Generate Backend-Coverage Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        jacoco-csv-file: target/site/jacoco-aggregate/jacoco.csv
        badges-directory: ./out/badges/

    - run: mv target/cypress-coverage out/frontend
    - run: mv target/site/jacoco-aggregate out/backend

    - name: Generate index page for the coverage reports
      run: echo "<p><a href='frontend/lcov-report/index.html'>Frontend</a></p><p><a href='backend/index.html'>Backend</a></p>" > out/index.html

    - name: Deploy
      # only deploy on main branch
      if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./out
        force_orphan: true

  static:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: install node
      uses: actions/setup-node@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: build static site
      run: bash buildStatic.sh

    - name: Cypress run
      uses: cypress-io/github-action@v4
      with:
        working-directory: tmp/
        start: python3 -m http.server 8080 -d resources/static/
